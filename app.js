require('dotenv').config();
const express = require('express');
const { exec, execSync } = require('child_process');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const path = require('path');
const fs = require('fs');

const { getEasternTime, getFormattedDate, getEasternDateHour } = require('./utils');  // Adjust the path as necessary based on your file structure
const app = express();
const port = 8087;
const users = {
  admin: {
    username: "admin",
    // This is a hashed password generated by bcrypt
    password: process.env.ADMIN_PASSWORD_HASH
  }
};
const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (authHeader) {
    const token = authHeader.split(' ')[1];

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
      if (err) {
        return res.sendStatus(403);
      }

      req.user = user;
      next();
    });
  } else {
    res.sendStatus(401);
  }
};



app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});
app.use(express.static('public')); // Serve static files from 'public' directory
// Serve static files from 'assets' directory
app.use('/assets', express.static('assets'));
app.use(express.json()); // Parse JSON bodies

let serverRunning = false; // Variable to track the server state
let lastBackupHour = null;
app.get('/status', (req, res) => {
  res.json({ running: serverRunning });
});
// Start the Minecraft server
app.post('/start', authenticateJWT, (req, res) => {
  const subprocess = exec(`sh ${process.env.START_COMMAND_PATH}`);

  subprocess.stdout.on('data', (data) => {
    console.log(`stdout: ${data}`);
  });

  subprocess.stderr.on('data', (data) => {
    console.error(`stderr: ${data}`);
  });

  subprocess.on('error', (error) => {
    console.error(`exec error: ${error}`);
    res.status(500).send('Failed to start the server');
  });

  // Send a response back immediately after starting the server
  serverRunning = true; // Set to true when server starts
  res.send('Server start command executed');
  console.log(`Server start command executed at ${getEasternTime()}`);
});

// Stop the Minecraft server
app.post('/stop', authenticateJWT, (req, res) => {
  // Sends the "stop" command to the Minecraft server running in a screen session
  exec('screen -S MinecraftSession -p 0 -X stuff "stop"$(printf "\\r")', (error, stdout, stderr) => {
    if (error) {
      console.error(`exec error: ${error}`);
      return res.status(500).send('Failed to stop the server');
    }
    serverRunning = false; // Set to false when server stops
    res.send('Server stop command issued successfully');
    console.log(`Server stop command executed at ${getEasternTime()}`);
  });
});
app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  // Check if the user exists
  const user = users[username];
  if (user) {
    // Compare hashed password
    const match = await bcrypt.compare(password, user.password);
    if (match) {
      // Create and assign a token
      const token = jwt.sign({ username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ message: "Authentication successful!", token });
    } else {
      res.status(401).send("Invalid Credentials");
    }
  } else {
    res.status(401).send("User does not exist");
  }
});

// Backup Minecraft server
app.post('/backup', authenticateJWT, async (req, res) => {
  const now = new Date();
  const currentHour = getEasternDateHour();

  if (lastBackupHour === currentHour) {
    return res.status(403).send('A backup has already been performed this hour.');
  }

  let wasServerRunning = serverRunning; // Store the state of the server
  if (serverRunning) {
    execSync('screen -S MinecraftSession -p 0 -X stuff "stop$(printf "\\r")"');
    serverRunning = false;
    console.log(`Server stopped for backup at ${getEasternTime()}`);
    setTimeout(() => performBackup(currentHour, now, wasServerRunning, res), 3000)
  }
  else {
    setTimeout(() => performBackup(currentHour, now, wasServerRunning, res), 5)
  }
});
// Function to handle the backup process
function performBackup(currentHour, now, wasServerRunning, res) {
  try {
    const dateFolder = getFormattedDate();
    const hourLabel = now.getHours() >= 12 ? `${(now.getHours() % 12) || 12} PM` : `${now.getHours()} AM`; // Correct 12-hour format with AM/PM
    const backupPath = `${process.env.BACKUP_PATH}${dateFolder}/${hourLabel}`;
    fs.mkdirSync(backupPath, { recursive: true });
    execSync(`cp -Ra ${process.env.MINECRAFT_SERVER_PATH}* "${backupPath}"`);
    console.log(`Backup performed successfully at ${getEasternTime()}`);
  } catch (error) {
    console.error(`Backup failed: ${error}`);
    return res.status(500).send('Failed to perform backup');
  }

  // Restart the server if it was originally running
  if (wasServerRunning) {
    exec(`sh ${process.env.START_COMMAND_PATH}`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error starting the server: ${error}`);
        return;
      }
      serverRunning = true;
      console.log(`Server restarted after backup at ${getEasternTime()}`);
    });
  }

  lastBackupHour = currentHour; // Update last backup hour
  res.send('Backup performed successfully');
}
app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});


